---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Rubim.
--- DateTime: 14/06/2018 16:30
---

--- Localize Vars
-- Addon
local addonName, addonTable = ...;
-- AethysCore
local AC = AethysCore;
local Cache = AethysCache;
local Unit = AC.Unit;
local Player = Unit.Player;
local Target = Unit.Target;
local Spell = AC.Spell;
local Item = AC.Item;

-- Spells
if not Spell.Hunter then
    Spell.Hunter = {};
end
Spell.Hunter.Marksmanship = {
    -- Racials
    ArcaneTorrent = Spell(25046),
    Berserking = Spell(26297),
    BloodFury = Spell(20572),
    GiftoftheNaaru = Spell(59547),
    Shadowmeld = Spell(58984),
    -- Abilities
    AimedShot = Spell(19434),
    ArcaneShot = Spell(185358),
    BurstingShot = Spell(186387),
    HuntersMark = Spell(185365),
    MarkedShot = Spell(185901),
    MarkingTargets = Spell(223138),
    MultiShot = Spell(2643),
    TrueShot = Spell(193526),
    Vulnerability = Spell(187131),
    -- Talents
    AMurderofCrows = Spell(131894),
    Barrage = Spell(120360),
    BindingShot = Spell(109248),
    BlackArrow = Spell(194599),
    ExplosiveShot = Spell(212431),
    LockandLoad = Spell(194594),
    PatientSniper = Spell(234588),
    PiercingShot = Spell(198670),
    Sentinel = Spell(206817),
    Sidewinders = Spell(214579),
    TrickShot = Spell(199522),
    Volley = Spell(194386),
    -- Artifact
    Windburst = Spell(204147),
    BullsEye = Spell(204090),
    -- Defensive
    AspectoftheTurtle = Spell(186265),
    Exhilaration = Spell(109304),
    -- Utility
    AspectoftheCheetah = Spell(186257),
    CounterShot = Spell(147362),
    Disengage = Spell(781),
    FreezingTrap = Spell(187650),
    FeignDeath = Spell(5384),
    TarTrap = Spell(187698),
    -- Legendaries
    SentinelsSight = Spell(208913),
    -- Misc
    CriticalAimed = Spell(242243),
    PotionOfProlongedPowerBuff = Spell(229206),
    SephuzBuff = Spell(208052),
    MKIIGyroscopicStabilizer = Spell(235691),
    PoolingSpell = Spell(9999000010),
    -- Macros
};
local S = Spell.Hunter.Marksmanship;
-- Items
if not Item.Hunter then
    Item.Hunter = {};
end
Item.Hunter.Marksmanship = {
    -- Legendaries
    SephuzSecret = Item(132452, { 11, 12 }),
    -- Trinkets
    ConvergenceofFates = Item(140806, { 13, 14 }),
    -- Potions
    PotionOfProlongedPower = Item(142117),
};
local I = Item.Hunter.Marksmanship;
-- Rotation Var
local ShouldReturn; -- Used to get the return string
local TrueshotCooldown = 0;
local Vuln_Window, Vuln_Aim_Casts, Can_GCD, WaitingForSentinel;
-- GUI Settings

-- Register for InFlight tracking
S.AimedShot:RegisterInFlight();
S.Windburst:RegisterInFlight();
S.MarkedShot:RegisterInFlight();
S.ArcaneShot:RegisterInFlight(S.MarkingTargets);
S.MultiShot:RegisterInFlight(S.MarkingTargets);
S.Sidewinders:RegisterInFlight(S.MarkingTargets);

local GCDPrev = Player:GCDRemains();
local function OffsetRemainsAuto (ExpirationTime, Offset)
    if type(Offset) == "number" then
        ExpirationTime = ExpirationTime - Offset;
    elseif type(Offset) == "string" then
        if Offset == "Auto" then
            local GCDRemain = Player:GCDRemains()
            local GCDelta = GCDRemain - GCDPrev;
            if GCDelta <= 0 or (GCDelta > 0 and Player.MMHunter.GCDDisable > 0) or Player:IsCasting() then
                ExpirationTime = ExpirationTime - math.max(GCDRemain, Player:CastRemains());
                GCDPrev = GCDRemain;
            else
                ExpirationTime = ExpirationTime - 0;
            end
        end
    else
        error("Invalid Offset.");
    end
    return ExpirationTime;
end

local function DebuffRemains (Spell, AnyCaster, Offset)
    local ExpirationTime = Target:Debuff(Spell, 7, AnyCaster);
    if ExpirationTime then
        if Offset then
            ExpirationTime = OffsetRemainsAuto(ExpirationTime, Offset);
        end
        local Remains = ExpirationTime - AC.GetTime();
        return Remains >= 0 and Remains or 0;
    else
        return 0;
    end
end

local function DebuffRemainsP (Spell, AnyCaster, Offset)
    return DebuffRemains(Spell, AnyCaster, Offset or "Auto");
end

local function DebuffP (Spell, AnyCaster, Offset)
    return DebuffRemains(Spell, AnyCaster, Offset or "Auto") > 0;
end

local function TargetDebuffRemainsP (Spell, AnyCaster, Offset)
    if Spell == S.Vulnerability and (S.Windburst:InFlight() or S.MarkedShot:InFlight() or Player:PrevGCDP(1, S.Windburst, true)) then
        return 7;
    else
        return DebuffRemainsP(Spell);
    end
end

local function TargetDebuffP (Spell, AnyCaster, Offset)
    if Spell == S.Vulnerability then
        return DebuffP(Spell) or S.Windburst:InFlight() or S.MarkedShot:InFlight() or Player:PrevGCDP(1, S.Windburst, true);
    elseif Spell == S.HuntersMark then
        return DebuffP(Spell) or S.ArcaneShot:InFlight(S.MarkingTargets) or S.MultiShot:InFlight(S.MarkingTargets) or S.Sidewinders:InFlight(S.MarkingTargets);
    else
        return DebuffP(Spell);
    end
end

local function IsCastableP (Spell)
    if Spell == S.AimedShot then
        return Spell:IsCastable() and PlayerFocusPredicted() > Spell:Cost();
    elseif Spell == S.MarkedShot then
        return Spell:IsCastable() and PlayerFocusPredicted() > Spell:Cost() and TargetDebuffP(S.HuntersMark);
    elseif Spell == S.Windburst then
        return Spell:IsCastable() and not Player:PrevGCDP(1, S.Windburst, true) and not Player:IsCasting(S.Windburst);
    else
        return Spell:IsCastable();
    end
end

local function Burst()
    if S.BlackArrow:IsReady() then
        return S.BlackArrow:ID()
    end

    if S.Windburst:IsReady() then
        return S.Windburst:ID()
    end

    if S.AMurderofCrows:IsReady() then
        return S.AMurderofCrows:ID()
    end

    if S.Sidewinders:IsAvailable() and S.Sidewinders:IsReady() and Target:DebuffRemains(S.Vulnerability) < Player:GCD() then
        return 224806
    end

    if S.MarkedShot:IsReady() and Target:DebuffRemains(S.Vulnerability) < Player:GCD() then
        return S.MarkedShot:ID()
    end

    if S.TrueShot:IsReady() then
        return S.TrueShot:ID()
    end

    if S.AimedShot:IsReady() and TargetDebuffRemainsP(S.Vulnerability) > S.AimedShot:CastTime() then
        return S.AimedShot:ID()
    end

    if S.Sidewinders:Ready() then
        return 224806
    end

    if S.MarkedShot:IsReady() and Target:DebuffRemains(S.Vulnerability) < 3 then
        return S.MarkedShot:ID()
    end

    if S.AimedShot:IsReady() then
        return S.AimedShot:ID()
    end

    if S.AMurderofCrows:IsAvailable() and  S.AMurderofCrows:IsReady() then
        return S.AMurderofCrows:ID()
    end
end

local function Sustained()
    if S.BlackArrow:IsAvailable() and S.BlackArrow:IsReady() then
        return S.BlackArrow:ID()
    end

    if Player:IsMoving() and S.MarkedShot:IsReady() then
        return S.MarkedShot:ID()
    end

    if Player:IsMoving() and S.Sidewinders:IsReady() and Target:DebuffRemains(S.Vulnerability) < Player:GCD() then
        return 224806
    end

    if S.MarkedShot:IsReady() and Target:DebuffRemains(S.Vulnerability) < Player:GCD() then
        return S.MarkedShot:ID()
    end

    if S.Sidewinders:IsAvailable() and S.Sidewinders:IsReady() and Target:DebuffRemains(S.Vulnerability) < Player:GCD() then
        return 224806
    end

    if S.AimedShot:IsReady() and TargetDebuffRemainsP(S.Vulnerability) > S.AimedShot:CastTime() then
        return S.AimedShot:ID()
    end

    if S.Windburst:IsReady() then
        return S.Windburst:ID()
    end

    if S.Sidewinders:Ready() then
        return 224806
    end
end

function HunterMM()
    if not Player:AffectingCombat() then
        return "146250"
    end

    if TargetIsValid() then
        --if CDsON() and Burst() ~= nil then
        --            return Burst()
        --        end
        if Sustained() ~= nil then
            return Sustained()
        end
    end

    return 233159
end