---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Rubim.
--- DateTime: 02/06/2018 12:53
---

local RubimRH = LibStub("AceAddon-3.0"):GetAddon("RubimRH")
local HL = HeroLib;
local Cache = HeroCache;
local Unit = HL.Unit;
local Player = Unit.Player;
local Target = Unit.Target;

function RubimRH.CCToggle()
	PlaySound(891, "Master");
	if ccBreak == false then
		RubimRH.db.profile.mainOption.ccbreak = true
		ccBreak = true
	else
		ccBreak = false
		RubimRH.db.profile.mainOption.ccbreak = false
	end
	print("|cFF69CCF0CC Break" .. "|r: |cFF00FF00" .. tostring(ccBreak))
end

function RubimRH.PotionToggle()
	PlaySound(891, "Master");
	if Potion == false then
		RubimRH.db.profile.mainOption.potion = true
		Potion = true
	else
		Potion = false
		RubimRH.db.profile.mainOption.potion = false
	end
	print("|cFF69CCF0Potion" .. "|r: |cFF00FF00" .. tostring(Potion))
end

function RubimRH.CDToggle()
	PlaySound(891, "Master");
	if RubimRH.db.profile[RubimRH.playerSpec].cooldown == false then
		RubimRH.db.profile[RubimRH.playerSpec].cooldown = true
	else
		RubimRH.db.profile[RubimRH.playerSpec].cooldown = false
	end
	print("|cFF69CCF0CD" .. "|r: |cFF00FF00" .. tostring(RubimRH.config.cooldown))
end

function RubimRH.AttackToggle()
	PlaySound(891, "Master");
	if RubimRH.db.profile.mainOption.startattack == false then
		RubimRH.db.profile.mainOption.startattack = true
	else
		RubimRH.db.profile.mainOption.startattack = false
	end
	print("|cFF69CCF0Auto-Skill: " .. "|r: |cFF00FF00" .. tostring(RubimRH.db.profile.mainOption.startattack))
end

RubimRH.useAoE = true
function RubimRH.AoEToggle()
	PlaySound(891, "Master");
	if RubimRH.useAoE == false then
		RubimRH.useAoE = true
	else
		RubimRH.useAoE = false
	end
	print("|cFF69CCF0AoE" .. "|r: |cFF00FF00" .. tostring(RubimRH.useAoE))
end

function RubimRH.CDsON()
	if Player:Level() < 109 then
		return true
	end

	if RubimRH.config.cooldown == true then
		if UnitExists("boss1") == true or UnitClassification("target") == "worldboss" then
			return true
		end

		if UnitExists("target") and UnitHealthMax("target") >= UnitHealthMax("player") then
			return true
		end

		if Target:IsDummy() then
			return true
		end

		if UnitIsPlayer("target") then
			return true
		end
	end
	return false
end

function RubimRH.AoEON()
	if RubimRH.useAoE == true then
		return true
	else
		return false
	end
end

function RubimRH.PotionON()
	if Potion == true then
		return true
	else
		return false
	end
end

local options, configOptions = nil, {}
--[[ This options table is used in the GUI config. ]]--
local function getOptions()
	if not options then
		options = {
			type = "group",
			name = "RubimRH",
			args = {
				mainOptions = {
					order = 1,
					type = "group",
					name = "General",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							childGroups = "tree",
							inline = true,
							name = "General",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile.mainOption[key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile.mainOption[key] = value
							end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Controls if we should suggest skills without a target.",
								},
								startattack = {
									order = 2,
									type = "toggle",
									get = function()
										return RubimRH.db.profile.mainOption.startattack
									end,
									set = function(info, v)
										RubimRH.AttackToggle()
									end,
									name = "Skills without a target."
								},
							}
						},
						items = {
							order = 1,
							type = "group",
							childGroups = "tree",
							inline = true,
							name = "Items",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile.mainOption[key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile.mainOption[key] = value
							end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "When to use Healthstone. 0 to Disable",
								},
								healthstoneper = {
									order = 3,
									type = "range",
									min = 0,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Healthstone"
								},
							}
						},
						keybind = {
							order = 1,
							type = "group",
							childGroups = "tree",
							inline = true,
							name = "Keybinds",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile.mainOption[key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile.mainOption[key] = value
							end,
							args = {
								cooldownbind = {
									order = 3,
									type = "keybinding",
									get = function()
										return GetBindingKey("Cooldown Toggle")
									end,
									set = function(info, v)
										SetBinding(v, "Cooldown Toggle")
										SaveBindings(GetCurrentBindingSet())
									end,
									name = "Cooldowns"
								},
								interruptsbind = {
									order = 4,
									type = "keybinding",
									get = function()
										return GetBindingKey("Interrupt Toggle")
									end,
									set = function(info, v)
										SetBinding(v, "Interrupt Toggle")
										SaveBindings(GetCurrentBindingSet())
									end,
									name = "Interrupts"
								},
								aoebind = {
									order = 5,
									type = "keybinding",
									get = function()
										return GetBindingKey("AoE Toggle")
									end,
									set = function(info, v)
										SetBinding(v, "AoE Toggle")
										SaveBindings(GetCurrentBindingSet())
									end,
									name = "AoE"
								},
							}
						},
						extraconfig = {
							order = 1,
							type = "group",
							childGroups = "tree",
							inline = true,
							name = "Spell Blocker",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile.mainOption[key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile.mainOption[key] = value
							end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Changing this can break your rotation, PAY ATTENTION.",
									fontSize = "large",
								},
								execute = {
									type = "execute",
									name = "Block Spell",
									func = function()
										RubimRH.SpellBlocker()
									end,
								},
							}
						},
						classConfig = {
							order = 1,
							type = "group",
							childGroups = "tree",
							inline = true,
							name = "Class Config",
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Class Config are acessible by right clicking the Main Icon.",
									fontSize = "large",
								},
							}
						},
					}
				},
				dkBlood = {
					order = 1,
					type = "group",
					name = "Death Knight - Blood",
					childGroups = "tree",
					args = {
						advanced = {
							order = 1,
							type = "group",
							childGroups = "tree",
							inline = true,
							name = "Advanced",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile[250][key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile[250][key] = value
							end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Incoming Damage (percent) to use a Deatk Strike.",
								},
								smartds = {
									order = 2,
									type = "range",
									min = 0,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Death Strike (inc dmg)"
								},
								description2 = {
									order = 3,
									type = "description",
									name = "How much runic power to save.",
								},
								deficitds = {
									order = 4,
									type = "range",
									min = 0,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Death Strike (defict)"
								},
							}
						},
						defensivecooldowns = {
							order = 1,
							type = "group",
							childGroups = "tree",
							inline = true,
							name = "Cooldowns",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile[250][key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile[250][key] = value
							end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Defensive Cooldowns.",
								},
								icebound = {
									order = 2,
									type = "range",
									min = 0,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Icebound Fortitude"
								},
								runetap = {
									order = 2,
									type = "range",
									min = 0,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Rune Tap"
								},
								vampiricblood = {
									order = 2,
									type = "range",
									min = 0,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Vampiric Blood"
								},
								drw = {
									order = 2,
									type = "range",
									min = 0,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Dancing Rune Weapon"
								},
							}
						},
					},	
				},				
				dkFrost = {
					order = 1,
					type = "group",
					name = "Death Knight - Frost",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile[251][key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile[251][key] = value
							end,
							args = {
								cooldown = {
									order = 1,
									type = "toggle",
									get = function()
										return RubimRH.useCD
									end,
									set = function(info, v)
										RubimRH.CDToggle()
									end,
									name = "Damage Cooldowns"
								},
							}
						},
						defensivecooldowns = {
							order = 2,
							type = "group",
							childGroups = "tree",
							inline = true,
							name = "Cooldowns",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile[251][key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile[251][key] = value
							end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Defensive Cooldowns.",
								},
								icebound = {
									order = 2,
									type = "range",
									min = 0,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Icebound Fortitude"
								},
								deathstrike = {
									order = 2,
									type = "range",
									min = 5,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Death Strike (Dark Succur)"
								},
							}
						},
					},	
				},		
				dkUnholy = {
					order = 1,
					type = "group",
					name = "Death Knight - Unholy",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile[251][key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile[251][key] = value
							end,
							args = {
								cooldown = {
									order = 1,
									type = "toggle",
									get = function()
										return RubimRH.useCD
									end,
									set = function(info, v)
										RubimRH.CDToggle()
									end,
									name = "Damage Cooldowns"
								},
							}
						},
						defensivecooldowns = {
							order = 2,
							type = "group",
							childGroups = "tree",
							inline = true,
							name = "Cooldowns",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile[252][key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile[252][key] = value
							end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Defensive Cooldowns.",
								},
								icebound = {
									order = 2,
									type = "range",
									min = 0,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Icebound Fortitude"
								},
								deathstrike = {
									order = 2,
									type = "range",
									min = 5,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Death Strike (Dark Succur)"
								},
							}
						},
					},	
				},		
				dhHavoc = {
					order = 1,
					type = "group",
					name = "No config options :(",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							--get = function(info)
								--local key = info.arg or info[#info]
								--return RubimRH.db.profile[577][key]
							--end,
							--set = function(info, value)
								--local key = info.arg or info[#info]
								--RubimRH.db.profile[577][key] = value
							--end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Nothing to configure. Suggest configuration options to the developer :)",
								},
							}
						},
					},	
				},		
				dhVeng = {
					order = 1,
					type = "group",
					name = "No config options :(",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							--get = function(info)
								--local key = info.arg or info[#info]
								--return RubimRH.db.profile[581][key]
							---end,
							--set = function(info, value)
								--local key = info.arg or info[#info]
								--RubimRH.db.profile[581][key] = value
							--end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Nothing to configure. Suggest configuration options to the developer :)",
								},
							}
						},
					},	
				},		
				drBalance = {
					order = 1,
					type = "group",
					name = "No config options :(",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							--get = function(info)
								--local key = info.arg or info[#info]
								--return RubimRH.db.profile[581][key]
							---end,
							--set = function(info, value)
								--local key = info.arg or info[#info]
								--RubimRH.db.profile[581][key] = value
							--end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Nothing to configure. Suggest configuration options to the developer :)",
								},
							}
						},
					},	
				},		
				drFeral = {
					order = 1,
					type = "group",
					name = "No config options :(",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							--get = function(info)
								--local key = info.arg or info[#info]
								--return RubimRH.db.profile[581][key]
							---end,
							--set = function(info, value)
								--local key = info.arg or info[#info]
								--RubimRH.db.profile[581][key] = value
							--end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Nothing to configure. Suggest configuration options to the developer :)",
								},
							}
						},
					},	
				},		
				drGuardian = {
					order = 1,
					type = "group",
					name = "No config options :(",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							--get = function(info)
								--local key = info.arg or info[#info]
								--return RubimRH.db.profile[581][key]
							---end,
							--set = function(info, value)
								--local key = info.arg or info[#info]
								--RubimRH.db.profile[581][key] = value
							--end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Nothing to configure. Suggest configuration options to the developer :)",
								},
							}
						},
					},	
				},		
				drResto = {
					order = 1,
					type = "group",
					name = "No config options :(",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							--get = function(info)
								--local key = info.arg or info[#info]
								--return RubimRH.db.profile[581][key]
							---end,
							--set = function(info, value)
								--local key = info.arg or info[#info]
								--RubimRH.db.profile[581][key] = value
							--end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Nothing to configure. Suggest configuration options to the developer :)",
								},
							}
						},
					},	
				},		
				hrMM = {
					order = 1,
					type = "group",
					name = "No config options :(",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							--get = function(info)
								--local key = info.arg or info[#info]
								--return RubimRH.db.profile[581][key]
							---end,
							--set = function(info, value)
								--local key = info.arg or info[#info]
								--RubimRH.db.profile[581][key] = value
							--end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Nothing to configure. Suggest configuration options to the developer :)",
								},
							}
						},
					},	
				},		
				hrBM = {
					order = 1,
					type = "group",
					name = "No config options :(",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							--get = function(info)
								--local key = info.arg or info[#info]
								--return RubimRH.db.profile[581][key]
							---end,
							--set = function(info, value)
								--local key = info.arg or info[#info]
								--RubimRH.db.profile[581][key] = value
							--end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Nothing to configure. Suggest configuration options to the developer :)",
								},
							}
						},
					},	
				},		
				hrSurv = {
					order = 1,
					type = "group",
					name = "No config options :(",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							--get = function(info)
								--local key = info.arg or info[#info]
								--return RubimRH.db.profile[581][key]
							---end,
							--set = function(info, value)
								--local key = info.arg or info[#info]
								--RubimRH.db.profile[581][key] = value
							--end,
							args = {
								description = {
									order = 1,
									type = "description",
									name = "Nothing to configure. Suggest configuration options to the developer :)",
								},
							}
						},
					},	
				},		
				plProt = {
					order = 1,
					type = "group",
					name = "Paladin - Protection",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile[66][key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile[66][key] = value
							end,
							args = {
								cooldown = {
									order = 1,
									type = "toggle",
									get = function()
										return RubimRH.useCD
									end,
									set = function(info, v)
										RubimRH.CDToggle()
									end,
									name = "Cooldowns"
								},
								layonahandspct = {
									order = 2,
									type = "range",
									min = 5,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Lay on Hands"
								},
								ardentdefenderpct = {
									order = 3,
									type = "range",
									min = 5,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Ardent Defender"
								},
								guardianofancientkingspct = {
									order = 4,
									type = "range",
									min = 5,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Guardian of Ancient Kings"
								},
							}
						},
					},	
				},		
				plRet = {
					order = 1,
					type = "group",
					name = "Paladin - Retribution",
					childGroups = "tree",
					args = {
						general = {
							order = 1,
							type = "group",
							inline = true,
							name = "General",
							get = function(info)
								local key = info.arg or info[#info]
								return RubimRH.db.profile[70][key]
							end,
							set = function(info, value)
								local key = info.arg or info[#info]
								RubimRH.db.profile[581][70] = value
							end,
							args = {
								cooldown = {
									order = 1,
									type = "toggle",
									get = function()
										return RubimRH.useCD
									end,
									set = function(info, v)
										RubimRH.CDToggle()
									end,
									name = "Cooldowns"
								},
								justicarglory = {
									order = 1,
									type = "range",
									min = 5,
									max = 95,
									step = 5,
									--fontSize = "medium",
									name = "Justicar/Word of Glory"
								},
								flashoflight = {
									order = 2,
									type = "range",
									min = 5,
									max = 95,
									step = 1,
									--fontSize = "medium",
									name = "Flash of Light"
								}
							}
						},
					},	
				},	

			}
		}
		for k, v in pairs(configOptions) do
			options.args[k] = (type(v) == "function") and v() or v
		end
	end

	return options
end

local function openConfig()
	InterfaceOptionsFrame_OpenToCategory(RubimRH.optionsFrames.Profiles)
	InterfaceOptionsFrame_OpenToCategory(RubimRH.optionsFrames.RubimRH)

	InterfaceOptionsFrame:Raise()
end

function RubimRH:SetupOptions()
	self.optionsFrames = {}

	LibStub("AceConfigRegistry-3.0"):RegisterOptionsTable("RubimRH", getOptions)
	self.optionsFrames.RubimRH = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", nil, nil, "mainOptions")
	self.optionsFrames["dkBlood"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "DK - Blood", "RubimRH", "dkBlood")
	self.optionsFrames["dkFrost"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "DK - Frost", "RubimRH", "dkFrost")
	self.optionsFrames["dkUnholy"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "DK - Unholy", "RubimRH", "dkUnholy")

	--self.optionsFrames["dhHavoc"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "DH - Havoc", "RubimRH", "dhHavoc")
	--self.optionsFrames["dhVeng"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "DH - Vengeance", "RubimRH", "dhVeng")

	--self.optionsFrames["drBalance"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Druid - Balance", "RubimRH", "drBalance")
	--self.optionsFrames["drFeral"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Druid - Feral", "RubimRH", "drFeral")
	--self.optionsFrames["drGuardian"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Druid - Guardian", "RubimRH", "drGuardian")
	--self.optionsFrames["drResto"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Druid - Restoration", "RubimRH", "drResto")

	--self.optionsFrames["hrMM"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Hunter - MM", "RubimRH", "hrMM")
	--self.optionsFrames["hrBM"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Hunter - BM", "RubimRH", "hrBM")
	--self.optionsFrames["hrSurv"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Hunter - Survival", "RubimRH", "hrSurv")

	self.optionsFrames["plProt"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Paladin - Protection", "RubimRH", "plProt")
	self.optionsFrames["plRet"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Paladin - Retribution", "RubimRH", "plRet")




	self.optionsFrames["Classes"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Classes", "RubimRH", "Classes")

	configOptions["Profiles"] = LibStub("AceDBOptions-3.0"):GetOptionsTable(self.db)
	self.optionsFrames["Profiles"] = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("RubimRH", "Profiles", "RubimRH", "Profiles")

	LibStub("AceConsole-3.0"):RegisterChatCommand("RubimRH", openConfig)
end
